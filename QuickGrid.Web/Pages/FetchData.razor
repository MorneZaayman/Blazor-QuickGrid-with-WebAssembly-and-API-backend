@page "/fetchdata"

@using Microsoft.AspNetCore.Components.QuickGrid
@using QuickGrid.Shared.Dtos
@using System.ComponentModel;

@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Customers</PageTitle>

<h1>Customers</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (customersProvider == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        Items per page:
        <select @bind="@paginationState.ItemsPerPage">
            <option>5</option>
            <option>10</option>
            <option>20</option>
            <option>50</option>
        </select>
    </div>

    <QuickGrid @ref="customersGrid" ItemsProvider="@customersProvider" Pagination="@paginationState" Virtualize="true">
        <TemplateColumn Title="Avatar">
            <img width="50" src="@context.Avatar" alt="Customer avatar" />
        </TemplateColumn>
        <PropertyColumn Property="@(p => p.Name)" Sortable="true">
            <ColumnOptions>
                <input class="form-control" type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Filter..." />
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(p => p.EmailAddress)" Sortable="true" InitialSortDirection="SortDirection.Ascending">
            <ColumnOptions>
                <input class="form-control" type="search" autofocus @bind="emailAddressFilter" @bind:event="oninput" placeholder="Filter..." />
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(p => p.UserName)" Sortable="true" InitialSortDirection="SortDirection.Descending">
            <ColumnOptions>
                    <input class="form-control" type="search" autofocus @bind="userNameFilter" @bind:event="oninput" placeholder="Filter..." />
            </ColumnOptions>
        </PropertyColumn>
    </QuickGrid>


    <div class="text-center">
        <div class="btn-group">
            @if (paginationState.TotalItemCount.HasValue)
            {
                if (paginationState.CurrentPageIndex > 0)
                {
                    <button class="btn btn-primary" @onclick="@(() => paginationState.SetCurrentPageIndexAsync(0))">
                        &lt;&lt;
                    </button>

                    <button class="btn btn-primary" @onclick="@(() => paginationState.SetCurrentPageIndexAsync(paginationState.CurrentPageIndex - 1))">
                        &lt;
                    </button>
                }

                <button class="btn btn-outline-primary">
                    @(paginationState.CurrentPageIndex + 1)
                </button>

                if (paginationState.CurrentPageIndex < paginationState.LastPageIndex)
                {
                    <button class="btn btn-primary" @onclick="@(() => paginationState.SetCurrentPageIndexAsync(paginationState.CurrentPageIndex + 1))">
                        &gt;
                    </button>

                    <button class="btn btn-primary" @onclick="@(() => paginationState.SetCurrentPageIndexAsync(paginationState.LastPageIndex.GetValueOrDefault()))">
                        &gt;&gt;
                    </button>
                }
            
            }
        </div>
    </div>
}

@code {
    private QuickGrid<Customer?>? customersGrid;
    private GridItemsProvider<Customer>? customersProvider;
    private PaginationState paginationState = new PaginationState();

    string? _nameFilter;
    string? nameFilter
    {
        get
        {
            return _nameFilter;
        }

        set
        {
            _nameFilter = value;
            customersGrid?.RefreshDataAsync();
        }
    }

    string? _emailAddressFilter;
    string? emailAddressFilter
    {
        get
        {
            return _emailAddressFilter;
        }

        set
        {
            _emailAddressFilter = value;
            customersGrid?.RefreshDataAsync();
        }
    }

    string? _userNameFilter;
    string? userNameFilter
    {
        get
        {
            return _userNameFilter;
        }

        set
        {
            _userNameFilter = value;
            customersGrid?.RefreshDataAsync();
        }
    }

    protected override void OnInitialized()
    {

        paginationState.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();

        customersProvider = async req =>
        {
            var url = NavigationManager.GetUriWithQueryParameters("https://localhost:7111/Customer", new Dictionary<string, object?>
            {
                { "skip", req.StartIndex },
                { "limit", req.Count },
                { "nameFilter", nameFilter },
                { "emailAddressFilter", emailAddressFilter },
                { "userNameFilter", userNameFilter }
            });

            var response = await Http.GetFromJsonAsync<CustomersWrapper>(url, req.CancellationToken);

            return GridItemsProviderResult.From(
                items: response!.Customers,
                totalItemCount: response!.TotalCustomerCount);
        };
    }
}
