@page "/fetchdata"

@using Microsoft.AspNetCore.Components.QuickGrid
@using QuickGrid.Shared.Dtos

@inject HttpClient Http

<PageTitle>Customers</PageTitle>

<h1>Customers</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        Items per page:
        <select @bind="@paginationState.ItemsPerPage">
            <option>5</option>
            <option>10</option>
            <option>20</option>
            <option>50</option>
        </select>
    </div>

    <QuickGrid Items="@filteredCustomers" Pagination="@paginationState" Virtualize="true">
        <TemplateColumn Title="Avatar">
            <img width="50" src="@context.Avatar" alt="Customer avatar" />
        </TemplateColumn>
        <PropertyColumn Property="@(p => p.Name)">
            <ColumnOptions>
                <input class="form-control" type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Filter..." />
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(p => p.EmailAddress)">
            <ColumnOptions>
                <input class="form-control" type="search" autofocus @bind="emailAddressFilter" @bind:event="oninput" placeholder="Filter..." />
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(p => p.UserName)">
            <ColumnOptions>
                    <input class="form-control" type="search" autofocus @bind="userNameFilter" @bind:event="oninput" placeholder="Filter..." />
            </ColumnOptions>
        </PropertyColumn>
    </QuickGrid>

    <div class="text-center">
        <div class="btn-group">
            @if (paginationState.TotalItemCount.HasValue)
            {
                if (paginationState.CurrentPageIndex > 0)
                {
                    <button class="btn btn-primary" @onclick="@(() => paginationState.SetCurrentPageIndexAsync(0))">
                        &lt;&lt;
                    </button>

                    <button class="btn btn-primary" @onclick="@(() => paginationState.SetCurrentPageIndexAsync(paginationState.CurrentPageIndex - 1))">
                        &lt;
                    </button>
                }

                <button class="btn btn-outline-primary">
                    @(paginationState.CurrentPageIndex + 1)
                </button>

                if (paginationState.CurrentPageIndex < paginationState.LastPageIndex)
                {
                    <button class="btn btn-primary" @onclick="@(() => paginationState.SetCurrentPageIndexAsync(paginationState.CurrentPageIndex + 1))">
                        &gt;
                    </button>

                    <button class="btn btn-primary" @onclick="@(() => paginationState.SetCurrentPageIndexAsync(paginationState.LastPageIndex.GetValueOrDefault()))">
                        &gt;&gt;
                    </button>
                }
            
            }
        </div>
    </div>
}

@code {
    private PaginationState paginationState = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<Customer>? customers;
    private IQueryable<Customer>? filteredCustomers
    {
        get
       {
            if (customers is null)
            {
                return null;
            }

            var result = customers;

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Name.ToLowerInvariant().Contains(nameFilter.ToLowerInvariant()));
            }

            if (!string.IsNullOrEmpty(emailAddressFilter))
            {
                result = result.Where(c => c.EmailAddress.ToLowerInvariant().Contains(emailAddressFilter.ToLowerInvariant()));
            }

            if (!string.IsNullOrEmpty(userNameFilter))
            {
                result = result.Where(c => c.UserName.ToLowerInvariant().Contains(userNameFilter.ToLowerInvariant()));
            }

            return result;
        }
    }

    string nameFilter;
    string emailAddressFilter;
    string userNameFilter;

    protected override async Task OnInitializedAsync()
    {
        customers = Queryable.AsQueryable(await Http.GetFromJsonAsync<List<Customer>>("https://localhost:7111/Customer"));
        paginationState.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }
}
